!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/platform-browser"),require("@angular/forms"),require("@angular/core"),require("@angular/common/http")):"function"==typeof define&&define.amd?define("view-more-directive",["exports","@angular/platform-browser","@angular/forms","@angular/core","@angular/common/http"],t):t(e["view-more-directive"]={},e.ng.platformBrowser,e.ng.forms,e.ng.core,e.ng.common.http)}(this,function(e,t,o,i,n){"use strict";var r=function(){function e(e){this.http=e,this.name="hi",this.showReadmore=!1}return e.prototype.ngOnInit=function(){console.log("height equal");var e=new FormData;e.append("name","vaibhav"),e.append("email","test@test.com");var t={headers:(new n.HttpHeaders).set("Content-Type","application/x-www-form-urlencoded")};this.http.post("http://192.168.15.160:8000/api/reg",e,t).subscribe(function(e){console.log("res",e)})},e.prototype.showMore=function(e){this.showReadmore=e,console.log(e)},e.decorators=[{type:i.Component,args:[{selector:"my-app",template:'<hello name="{{ name }}"></hello>\n<p view-more  viewHeight="60" (showMore)="showMore($event)" > \n  A directive allows you to attach a behavior to DOM elements. This behavior could be as simple or as complex as you’d like.*ngFor and *ngIf are examples of built-in directives in Angular. In this article, I will show you how to make a custom Google place autocomplete directive that you can attach to any text input.\n  A directive allows you to attach a behavior to DOM elements. This behavior could be as simple or as complex as you’d like.*ngFor and *ngIf are examples of built-in directives in Angular. In this article, I will show you how to make a custom Google place autocomplete directive that you can attach to any text input.\n  A directive allows you to attach a behavior to DOM elements. This behavior could be as simple or as complex as you’d like.*ngFor and *ngIf are examples of built-in directives in Angular. In this article, I will show you how to make a custom Google place autocomplete directive that you can attach to any text input.\n  A directive allows you to attach a behavior to DOM elements. This behavior could be as simple or as complex as you’d like.*ngFor and *ngIf are examples of built-in directives in Angular. In this article, I will show you how to make a custom Google place autocomplete directive that you can attach to any text input.\n</p>\n',styles:["p{font-family:Lato}"]}]}],e.ctorParameters=function(){return[{type:n.HttpClient}]},e}(),a=function(){function e(){}return e.decorators=[{type:i.Component,args:[{selector:"hello",template:"<h1>Hello {{name}}!</h1>",styles:["h1 { font-family: Lato; }"]}]}],e.propDecorators={name:[{type:i.Input}]},e}(),l=function(){function e(e){this.elRef=e,this.showMore=new i.EventEmitter,this.toggleShowMore=!1,this.element=e.nativeElement}return e.prototype.ngOnInit=function(){console.log("height equal",this.viewHeight,this.element.offsetHeight)},e.prototype.ngAfterViewInit=function(){var e=this;if(this.actualHeight=this.element.offsetHeight+10,this.element.offsetHeight>this.viewHeight){console.log("height equal");var t=document.createElement("p"),o=document.createElement("span"),i=document.createTextNode("view More...");o.appendChild(i),t.appendChild(o),t.setAttribute("style","text-align: right;"),o.setAttribute("id","text_view"),o.setAttribute("style","cursor:pointer;"),this.element.parentNode.insertBefore(t,this.element.nextSibling),this.toggleEventOnViewMore(o),setTimeout(function(){e.showMore.emit(!0)},1e3)}else console.log("height not equal"),this.showMore.emit(!1)},e.prototype.toggleEventOnViewMore=function(e){var t,o=this;this.element.setAttribute("style","overflow: hidden;\n    height: "+this.viewHeight+"px;\n    transition: height 1s ease;\n    "),(t=document.createElement("style")).setAttribute("id","style_view_more"),t.textContent=".view_more {\n      height: "+this.actualHeight+"px !important;\n    }  \n",this.element.style.animationDirection="",this.element.appendChild(t),e.addEventListener("click",function(){o.toggleShowMore?(console.log("viewless"),o.element.classList.remove("view_more"),document.getElementById("text_view").innerHTML="view more..."):(console.log("viewmore"),document.getElementById("text_view").innerHTML="view less...",o.element.classList.add("view_more")),o.toggleShowMore=!o.toggleShowMore})},e.prototype.ngOnDestroy=function(){document.getElementById("style_view_more").remove()},e.decorators=[{type:i.Directive,args:[{selector:"[view-more]"}]}],e.ctorParameters=function(){return[{type:i.ElementRef}]},e.propDecorators={viewHeight:[{type:i.Input}],showMore:[{type:i.Output}]},e}(),s=function(){function e(){}return e.decorators=[{type:i.NgModule,args:[{imports:[t.BrowserModule,o.FormsModule,n.HttpClientModule],declarations:[r,a,l],bootstrap:[r],exports:[l]}]}],e}();e.ViewMoreDirectiveModule=s,e.ɵa=r,e.ɵb=a,e.ɵc=l,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=view-more-directive.umd.min.js.map